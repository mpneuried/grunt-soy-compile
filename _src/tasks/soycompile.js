// Generated by CoffeeScript 1.3.3
(function() {
  var exec, path;

  exec = require('child_process').exec;

  path = require("path");

  module.exports = function(grunt) {
    grunt.registerMultiTask("soycompile", "Compile soy files", function() {
      var aFns, done, msgExtPath, options, soycompilerPath,
        _this = this;
      done = this.async();
      options = this.options({
        extract: false,
        extractmsgpath: null,
        infusemsgpath: null,
        languages: [],
        outputPathFormat: ""
      });
      grunt.verbose.writeflags(options, 'Options');
      msgExtPath = path.resolve(__dirname + "/../_java/SoyMsgExtractor.jar");
      soycompilerPath = path.resolve(__dirname + "/../_java/SoyToJsSrcCompiler.jar");
      grunt.verbose.writeflags({
        compiler: soycompilerPath,
        msgext: msgExtPath
      }, 'Jar Paths');
      aFns = [];
      this.files.forEach(function(file) {
        var f, _i, _len, _ref;
        _ref = file.src;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          aFns.push(function(cba) {
            var fName,
              _this = this;
            grunt.log.writeln('Compile ' + file.src + '.');
            fName = path.basename(f, '.soy');
            grunt.verbose.writeln();
            exec("java -jar " + soycompilerPath + " --locales " + options.languages + " --outputPathFormat " + fName + "_{LOCALE}.js " + (path.resolve(f)), function(err, stdout, stderr) {
              if (err) {
                grunt.log.error(err);
                cba(err);
                return;
              }
              grunt.log.debug('stdout: ' + stdout);
              grunt.log.debug('stderr: ' + stderr);
              cba(null, stdout);
            });
          });
        }
      });
      grunt.util.async.parallel(aFns, function(err, result) {
        if (err) {
          grunt.log.error(err);
        } else {
          grunt.log.debug(result);
        }
        done();
      });
    });
  };

}).call(this);
